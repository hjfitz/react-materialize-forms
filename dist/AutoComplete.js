import React, { useEffect } from 'react';
import PropTypes from 'prop-types';
import uniqid from 'uniqid';
import M from 'materialize-css';

function AutoComplete(props) {
  const uId = `autocomplete-${uniqid()}`;
  const {
    s,
    m,
    l,
    xl,
    placeholder,
    onChange,
    value,
    data
  } = props;
  const small = s || 12;
  const medium = m || small;
  const large = l || medium;
  const extra = xl || large;
  useEffect(() => {
    const elem = document.querySelector(`#${uId}`);
    M.Autocomplete.init(elem, {
      data,
      onAutocomplete: onChange
    });
  }, []);
  return React.createElement("div", {
    className: `input-field col s${small} m${medium} l${large} xl${extra}`
  }, React.createElement("input", {
    type: "text",
    id: uId,
    className: "autocomplete",
    value: value || null,
    placeholder: placeholder,
    onChange: e => onChange(e.target.value)
  }));
}

AutoComplete.propTypes = {
  s: PropTypes.number,
  m: PropTypes.number,
  l: PropTypes.number,
  xl: PropTypes.number,
  placeholder: PropTypes.string,
  data: PropTypes.arrayOf(PropTypes.shape({
    name: PropTypes.string.isRequired
  })),
  onChange: PropTypes.func,
  value: PropTypes.string
};
AutoComplete.defaultProps = {
  s: 12,
  m: 12,
  l: 12,
  xl: 12,
  placeholder: null,
  data: [],
  onChange: null,
  value: null
};
export default AutoComplete;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BdXRvQ29tcGxldGUuanN4Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlRWZmZWN0IiwiUHJvcFR5cGVzIiwidW5pcWlkIiwiTSIsIkF1dG9Db21wbGV0ZSIsInByb3BzIiwidUlkIiwicyIsIm0iLCJsIiwieGwiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwidmFsdWUiLCJkYXRhIiwic21hbGwiLCJtZWRpdW0iLCJsYXJnZSIsImV4dHJhIiwiZWxlbSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIkF1dG9jb21wbGV0ZSIsImluaXQiLCJvbkF1dG9jb21wbGV0ZSIsImUiLCJ0YXJnZXQiLCJwcm9wVHlwZXMiLCJudW1iZXIiLCJzdHJpbmciLCJhcnJheU9mIiwic2hhcGUiLCJuYW1lIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLFNBQWhCLFFBQWlDLE9BQWpDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsUUFBbkI7QUFDQSxPQUFPQyxDQUFQLE1BQWMsaUJBQWQ7O0FBRUEsU0FBU0MsWUFBVCxDQUFzQkMsS0FBdEIsRUFBNkI7QUFDM0IsUUFBTUMsR0FBRyxHQUFJLGdCQUFlSixNQUFNLEVBQUcsRUFBckM7QUFDQSxRQUFNO0FBQ0pLLElBQUFBLENBREk7QUFDREMsSUFBQUEsQ0FEQztBQUNFQyxJQUFBQSxDQURGO0FBQ0tDLElBQUFBLEVBREw7QUFDU0MsSUFBQUEsV0FEVDtBQUNzQkMsSUFBQUEsUUFEdEI7QUFDZ0NDLElBQUFBLEtBRGhDO0FBQ3VDQyxJQUFBQTtBQUR2QyxNQUVGVCxLQUZKO0FBR0EsUUFBTVUsS0FBSyxHQUFHUixDQUFDLElBQUksRUFBbkI7QUFDQSxRQUFNUyxNQUFNLEdBQUdSLENBQUMsSUFBSU8sS0FBcEI7QUFDQSxRQUFNRSxLQUFLLEdBQUdSLENBQUMsSUFBSU8sTUFBbkI7QUFDQSxRQUFNRSxLQUFLLEdBQUdSLEVBQUUsSUFBSU8sS0FBcEI7QUFDQWpCLEVBQUFBLFNBQVMsQ0FBQyxNQUFNO0FBQ2QsVUFBTW1CLElBQUksR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXdCLElBQUdmLEdBQUksRUFBL0IsQ0FBYjtBQUNBSCxJQUFBQSxDQUFDLENBQUNtQixZQUFGLENBQWVDLElBQWYsQ0FBb0JKLElBQXBCLEVBQTBCO0FBQ3hCTCxNQUFBQSxJQUR3QjtBQUV4QlUsTUFBQUEsY0FBYyxFQUFFWjtBQUZRLEtBQTFCO0FBSUQsR0FOUSxFQU1OLEVBTk0sQ0FBVDtBQVFBLFNBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBRyxvQkFBbUJHLEtBQU0sS0FBSUMsTUFBTyxLQUFJQyxLQUFNLE1BQUtDLEtBQU07QUFBMUUsS0FDRTtBQUFPLElBQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsSUFBQSxFQUFFLEVBQUVaLEdBQXZCO0FBQTRCLElBQUEsU0FBUyxFQUFDLGNBQXRDO0FBQXFELElBQUEsS0FBSyxFQUFFTyxLQUFLLElBQUksSUFBckU7QUFBMkUsSUFBQSxXQUFXLEVBQUVGLFdBQXhGO0FBQXFHLElBQUEsUUFBUSxFQUFHYyxDQUFELElBQVFiLFFBQVEsQ0FBQ2EsQ0FBQyxDQUFDQyxNQUFGLENBQVNiLEtBQVY7QUFBL0gsSUFERixDQURGO0FBS0Q7O0FBRURULFlBQVksQ0FBQ3VCLFNBQWIsR0FBeUI7QUFDckJwQixFQUFBQSxDQUFDLEVBQUVOLFNBQVMsQ0FBQzJCLE1BRFE7QUFFckJwQixFQUFBQSxDQUFDLEVBQUVQLFNBQVMsQ0FBQzJCLE1BRlE7QUFHckJuQixFQUFBQSxDQUFDLEVBQUVSLFNBQVMsQ0FBQzJCLE1BSFE7QUFJckJsQixFQUFBQSxFQUFFLEVBQUVULFNBQVMsQ0FBQzJCLE1BSk87QUFLckJqQixFQUFBQSxXQUFXLEVBQUVWLFNBQVMsQ0FBQzRCLE1BTEY7QUFNckJmLEVBQUFBLElBQUksRUFBRWIsU0FBUyxDQUFDNkIsT0FBVixDQUFrQjdCLFNBQVMsQ0FBQzhCLEtBQVYsQ0FBZ0I7QUFDdENDLElBQUFBLElBQUksRUFBRS9CLFNBQVMsQ0FBQzRCLE1BQVYsQ0FBaUJJO0FBRGUsR0FBaEIsQ0FBbEIsQ0FOZTtBQVNyQnJCLEVBQUFBLFFBQVEsRUFBRVgsU0FBUyxDQUFDaUMsSUFUQztBQVVyQnJCLEVBQUFBLEtBQUssRUFBRVosU0FBUyxDQUFDNEI7QUFWSSxDQUF6QjtBQWFBekIsWUFBWSxDQUFDK0IsWUFBYixHQUE0QjtBQUN4QjVCLEVBQUFBLENBQUMsRUFBRSxFQURxQjtBQUV4QkMsRUFBQUEsQ0FBQyxFQUFFLEVBRnFCO0FBR3hCQyxFQUFBQSxDQUFDLEVBQUUsRUFIcUI7QUFJeEJDLEVBQUFBLEVBQUUsRUFBRSxFQUpvQjtBQUt4QkMsRUFBQUEsV0FBVyxFQUFFLElBTFc7QUFNeEJHLEVBQUFBLElBQUksRUFBRSxFQU5rQjtBQU94QkYsRUFBQUEsUUFBUSxFQUFFLElBUGM7QUFReEJDLEVBQUFBLEtBQUssRUFBRTtBQVJpQixDQUE1QjtBQVdBLGVBQWVULFlBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB1bmlxaWQgZnJvbSAndW5pcWlkJztcbmltcG9ydCBNIGZyb20gJ21hdGVyaWFsaXplLWNzcyc7XG5cbmZ1bmN0aW9uIEF1dG9Db21wbGV0ZShwcm9wcykge1xuICBjb25zdCB1SWQgPSBgYXV0b2NvbXBsZXRlLSR7dW5pcWlkKCl9YDtcbiAgY29uc3Qge1xuICAgIHMsIG0sIGwsIHhsLCBwbGFjZWhvbGRlciwgb25DaGFuZ2UsIHZhbHVlLCBkYXRhLFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHNtYWxsID0gcyB8fCAxMjtcbiAgY29uc3QgbWVkaXVtID0gbSB8fCBzbWFsbDtcbiAgY29uc3QgbGFyZ2UgPSBsIHx8IG1lZGl1bTtcbiAgY29uc3QgZXh0cmEgPSB4bCB8fCBsYXJnZTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dUlkfWApO1xuICAgIE0uQXV0b2NvbXBsZXRlLmluaXQoZWxlbSwge1xuICAgICAgZGF0YSxcbiAgICAgIG9uQXV0b2NvbXBsZXRlOiBvbkNoYW5nZSxcbiAgICB9KTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2BpbnB1dC1maWVsZCBjb2wgcyR7c21hbGx9IG0ke21lZGl1bX0gbCR7bGFyZ2V9IHhsJHtleHRyYX1gfT5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPXt1SWR9IGNsYXNzTmFtZT1cImF1dG9jb21wbGV0ZVwiIHZhbHVlPXt2YWx1ZSB8fCBudWxsfSBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9IG9uQ2hhbmdlPXsoZSkgPT4gKG9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKSl9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbkF1dG9Db21wbGV0ZS5wcm9wVHlwZXMgPSB7XG4gICAgczogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGw6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgeGw6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGF0YTogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB9KSksXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcbiAgXG5BdXRvQ29tcGxldGUuZGVmYXVsdFByb3BzID0ge1xuICAgIHM6IDEyLFxuICAgIG06IDEyLFxuICAgIGw6IDEyLFxuICAgIHhsOiAxMixcbiAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICBkYXRhOiBbXSxcbiAgICBvbkNoYW5nZTogbnVsbCxcbiAgICB2YWx1ZTogbnVsbCxcbn07XG4gIFxuZXhwb3J0IGRlZmF1bHQgQXV0b0NvbXBsZXRlO1xuICAiXX0=